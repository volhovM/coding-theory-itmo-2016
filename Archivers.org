#+LANGUAGE: en
#+TITLE: Information theory: HW #3 solution
#+AUTHOR: Volkhov Mikhail, M3338

* Task objectives, format, prerequisites
  So the task is to implement several algorithms of data compression
  and provide reports on them. Reports will contain logs from
  algorithms that will show how it operates this data. Tables with
  explanation will be attached. I won't attach haskell snippets this
  time as they became really big and complex. Instead, i'll put a
  separate pdf with all the code separately. *TODO*

  Proverb correspondent to my task is the following:

  #+BEGIN_QUOTE
  /Love the heart that hurts you, but never hurt the heart that loves you./
  #+END_QUOTE

  It's in english that's why i'll stick to utf-8/ascii encoding as
  byte representation. It contains $71$ letters, so in general it's
  $568$ bytes if used without any coding.
* Two-pass huffman coding
  I've implemented regural huffman coding, as it can be seen from the
  first table: code words of the same length are sorted
  lexicographically:
  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; margin-left: 15px;
  | Char | Code Word | Freq |
  |------+-----------+------|
  |      |        00 |   13 |
  | e    |       010 |    8 |
  | h    |       011 |    8 |
  | t    |       100 |   11 |
  | r    |      1010 |    5 |
  | u    |      1011 |    5 |
  | s    |     11000 |    2 |
  | y    |     11001 |    2 |
  | v    |     11010 |    3 |
  | a    |     11011 |    4 |
  | o    |     11100 |    4 |
  | ,    |    111010 |    1 |
  | .    |    111011 |    1 |
  | l    |    111100 |    1 |
  | n    |    111101 |    1 |
  | L    |    111110 |    1 |
  | b    |    111111 |    1 |
  |------+-----------+------|

  And the second pass completes encoding:
  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; margin-left: 15px;
  | $C$ | $P(C)$  | $Codeword$ | $L(S)$ |
  |-----+---------+------------+--------|
  | L   | 1 / 71  |     111110 |      6 |
  | o   | 4 / 71  |      11100 |     11 |
  | v   | 3 / 71  |      11010 |     16 |
  | e   | 8 / 71  |        010 |     19 |
  |     | 13 / 71 |         00 |     21 |
  | t   | 11 / 71 |        100 |     24 |
  | h   | 8 / 71  |        011 |     27 |
  | e   | 8 / 71  |        010 |     30 |
  |     | 13 / 71 |         00 |     32 |
  | h   | 8 / 71  |        011 |     35 |
  | e   | 8 / 71  |        010 |     38 |
  | a   | 4 / 71  |      11011 |     43 |
  | r   | 5 / 71  |       1010 |     47 |
  | t   | 11 / 71 |        100 |     50 |
  |     | 13 / 71 |         00 |     52 |
  | t   | 11 / 71 |        100 |     55 |
  | h   | 8 / 71  |        011 |     58 |
  | a   | 4 / 71  |      11011 |     63 |
  | t   | 11 / 71 |        100 |     66 |
  |     | 13 / 71 |         00 |     68 |
  | h   | 8 / 71  |        011 |     71 |
  | u   | 5 / 71  |       1011 |     75 |
  | r   | 5 / 71  |       1010 |     79 |
  | t   | 11 / 71 |        100 |     82 |
  | s   | 2 / 71  |      11000 |     87 |
  |     | 13 / 71 |         00 |     89 |
  | y   | 2 / 71  |      11001 |     94 |
  | o   | 4 / 71  |      11100 |     99 |
  | u   | 5 / 71  |       1011 |    103 |
  | ,   | 1 / 71  |     111010 |    109 |
  |     | 13 / 71 |         00 |    111 |
  | b   | 1 / 71  |     111111 |    117 |
  | u   | 5 / 71  |       1011 |    121 |
  | t   | 11 / 71 |        100 |    124 |
  |     | 13 / 71 |         00 |    126 |
  | n   | 1 / 71  |     111101 |    132 |
  | e   | 8 / 71  |        010 |    135 |
  | v   | 3 / 71  |      11010 |    140 |
  | e   | 8 / 71  |        010 |    143 |
  | r   | 5 / 71  |       1010 |    147 |
  |     | 13 / 71 |         00 |    149 |
  | h   | 8 / 71  |        011 |    152 |
  | u   | 5 / 71  |       1011 |    156 |
  | r   | 5 / 71  |       1010 |    160 |
  | t   | 11 / 71 |        100 |    163 |
  |     | 13 / 71 |         00 |    165 |
  | t   | 11 / 71 |        100 |    168 |
  | h   | 8 / 71  |        011 |    171 |
  | e   | 8 / 71  |        010 |    174 |
  |     | 13 / 71 |         00 |    176 |
  | h   | 8 / 71  |        011 |    179 |
  | e   | 8 / 71  |        010 |    182 |
  | a   | 4 / 71  |      11011 |    187 |
  | r   | 5 / 71  |       1010 |    191 |
  | t   | 11 / 71 |        100 |    194 |
  |     | 13 / 71 |         00 |    196 |
  | t   | 11 / 71 |        100 |    199 |
  | h   | 8 / 71  |        011 |    202 |
  | a   | 4 / 71  |      11011 |    207 |
  | t   | 11 / 71 |        100 |    210 |
  |     | 13 / 71 |         00 |    212 |
  | l   | 1 / 71  |     111100 |    218 |
  | o   | 4 / 71  |      11100 |    223 |
  | v   | 3 / 71  |      11010 |    228 |
  | e   | 8 / 71  |        010 |    231 |
  | s   | 2 / 71  |      11000 |    236 |
  |     | 13 / 71 |         00 |    238 |
  | y   | 2 / 71  |      11001 |    243 |
  | o   | 4 / 71  |      11100 |    248 |
  | u   | 5 / 71  |       1011 |    252 |
  | .   | 1 / 71  |     111011 |    258 |
  |-----+---------+------------+--------|

  Encoded proverb encoded is $l_2 = 258$ bits, while data amount needed to
  transfer huffman tree should be calculated manually. First, to
  transfer the tree itself, it's sufficient to pass only $19$ bits
  (calculated manually using table 3.3 from the study book).

  \begin{align*}
  \lceil\log{\dbinom{256}{1}}\rceil +
  \lceil\log{\dbinom{255}{3}}\rceil +
  \lceil\log{\dbinom{254}{2}}\rceil +
  \lceil\log{\dbinom{253}{5}}\rceil +
  \lceil\log{\dbinom{252}{6}}\rceil = 117
  \end{align*}

  So totally $l_1 = 19 + 117 = 136$, and total length is $l = l_1+l_2 =
  394$ bits. Much better than raw $568$ bits.

* Adaptive arithmetic coding
  Implementation uses renormalization together with fixed-point
  precision arithmetics (16 bits words). Algorithm "A" from textbook
  is used (has $n+1$ in denominator).

  Here is the table algorithm outputs (backslash stands for escape
  symbol):

  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; margin-left: 15px;
  | $C$   |    $P(C)$ | $Codeword$ | $L(S)$ |
  |-------+-----------+------------+--------|
  | \     |    1.0000 |            |      0 |
  | L     | 3.9216e-3 |    0100110 |      7 |
  | \     |    0.3333 |          0 |      8 |
  | o     | 3.9370e-3 |    0010011 |     15 |
  | \     |    0.4000 |         00 |     17 |
  | v     | 3.9526e-3 |     001000 |     23 |
  | \     |    0.4286 |        000 |     26 |
  | e     | 3.9683e-3 |  001000001 |     35 |
  | \     |    0.4444 |            |     35 |
  |       | 3.9841e-3 |  000010011 |     44 |
  | \     |    0.4545 |            |     44 |
  | t     | 4.0000e-3 |   00011111 |     52 |
  | \     |    0.4615 |          0 |     53 |
  | h     | 4.0161e-3 |   00011100 |     61 |
  | e     | 6.6667e-2 |      00001 |     66 |
  |       | 6.2500e-2 |       0000 |     70 |
  | h     | 5.8824e-2 |        001 |     73 |
  | e     |    0.1111 |        000 |     76 |
  | \     |    0.3684 |        001 |     79 |
  | a     | 4.0323e-3 |      01001 |     84 |
  | \     |    0.3810 |        000 |     87 |
  | r     | 4.0486e-3 |  001000100 |     96 |
  | t     | 4.3478e-2 |        010 |     99 |
  |       | 8.3333e-2 |      00000 |    104 |
  | t     | 8.0000e-2 |        010 |    107 |
  | h     | 7.6923e-2 |         00 |    109 |
  | a     | 3.7037e-2 |    0000010 |    116 |
  | t     |    0.1071 |        010 |    119 |
  |       |    0.1034 |       0000 |    123 |
  | h     |    0.1000 |        010 |    126 |
  | \     |    0.2903 |            |    126 |
  | u     | 4.0650e-3 |   00010101 |    134 |
  | r     | 3.0303e-2 |     000110 |    140 |
  | t     |    0.1176 |          0 |    141 |
  | \     |    0.2857 |       0001 |    145 |
  | s     | 4.0816e-3 |     001100 |    151 |
  |       |    0.1081 |     000000 |    157 |
  | \     |    0.2895 |          1 |    158 |
  | y     | 4.0984e-3 |     001101 |    164 |
  | o     | 2.5000e-2 |      00001 |    169 |
  | u     | 2.4390e-2 |        000 |    172 |
  | \     |    0.2857 |      00000 |    177 |
  | ,     | 4.1152e-3 | 0000100011 |    187 |
  |       |    0.1136 |        000 |    190 |
  | \     |    0.2889 |          1 |    191 |
  | b     | 4.1322e-3 |     001011 |    197 |
  | u     | 4.2553e-2 |      00010 |    202 |
  | t     |    0.1042 |       0001 |    206 |
  |       |    0.1224 |       0000 |    210 |
  | \     |    0.2800 |            |    210 |
  | n     | 4.1494e-3 |    0001000 |    217 |
  | e     | 5.7692e-2 |     000001 |    223 |
  | v     | 1.8868e-2 |    0011100 |    230 |
  | e     | 7.4074e-2 |        001 |    233 |
  | r     | 3.6364e-2 |       0011 |    237 |
  |       |    0.1250 |       0000 |    241 |
  | h     | 7.0175e-2 |        001 |    244 |
  | u     | 5.1724e-2 |      00110 |    249 |
  | r     | 5.0847e-2 |         01 |    251 |
  | t     |    0.1000 |       0001 |    255 |
  |       |    0.1311 |       0000 |    259 |
  | t     |    0.1129 |        010 |    262 |
  | h     | 7.9365e-2 |       0010 |    266 |
  | e     | 7.8125e-2 |       0010 |    270 |
  |       |    0.1385 |        000 |    273 |
  | h     | 9.0909e-2 |        010 |    276 |
  | e     | 8.9552e-2 |        001 |    279 |
  | a     | 2.9412e-2 |      00010 |    284 |
  | r     | 5.7971e-2 |       0011 |    288 |
  | t     |    0.1143 |          0 |    289 |
  |       |    0.1408 |     000000 |    295 |
  | t     |    0.1250 |            |    295 |
  | h     | 9.5890e-2 |     000010 |    301 |
  | a     | 4.0541e-2 |         00 |    303 |
  | t     |    0.1333 |        000 |    306 |
  |       |    0.1447 |     000000 |    312 |
  | \     |    0.1948 |         11 |    314 |
  | l     | 4.1667e-3 |    0101001 |    321 |
  | o     | 2.5316e-2 |     001100 |    327 |
  | v     | 2.5000e-2 |      10000 |    332 |
  | e     | 8.6420e-2 |       0010 |    336 |
  | s     | 1.2195e-2 |     011010 |    342 |
  |       |    0.1446 |        000 |    345 |
  | y     | 1.1905e-2 |       1000 |    349 |
  | o     | 3.5294e-2 |    0000111 |    356 |
  | u     | 4.6512e-2 |      01101 |    361 |
  | \     |    0.1839 |          1 |    362 |
  | .     | 4.1841e-3 |  000011110 |    371 |
  |-------+-----------+------------+--------|
  | final |           |          1 |    372 |

  On every step algorithm saves 16-digit high and low variables. If
  the interval we go into is small enough that new bounds share most
  significant bits, we put them on the wire. This algorithm is
  decribed both in textbook and on wikipedia[fn:1] and also in Amir
  Said's article "Introduction to Arithmetic Coding"[fn:2]. Thus empty
  spaces in third column mean that interval didn't satisfy this
  property. So eventually it took $372$ bits to encode the proverb,
  better than huffman.
* Enumerative
  First of all I emphasize that no /real encoder/ will be implemented,
  i'll just present here an estimate on how much information will it
  take. Enumerative encoding implementation seems complex and
  impractical to do.

  Here's the main function that calculates length of the input.
  #+BEGIN_SRC haskell
  enumerative :: BS.ByteString -> Integer
  enumerative input = l1 + l2
    where
      n = fromIntegral $ BS.length input
      chars = BS.unpack input
      unique = nub chars
      occurences =
          M.fromList $
          map (\i -> (i, fromIntegral $ length $ filter (== i) chars)) unique
      comp, compcomp, comp' :: [Integer]
      comp = reverse $
             sort $ map (\i -> fromMaybe 0 $ M.lookup i occurences) [0 .. 0xff]
      m = length comp
      compcomp = map (fromIntegral . length) $ group comp
      comp' = filter (> 0) comp
      l2 = ceiling $
           log2' $ foldr (\x acc -> acc `div` (factorial x)) (factorial n) comp'
      l11 = ceiling $ log2' $ n * product comp'
      l12 = ceiling $
            log2' $
            foldr (\x acc -> acc `div` (factorial x))
                  (factorial $ fromIntegral $ length comp)
                  compcomp
      l1 = l11 + l12
  #+END_SRC

  First sorted composition: $\tau =
  (13,11,8,8,5,5,4,4,3,2,2,1,1,1,1,1,1,0,0,..,0,0)$. Composition of
  composition $\tau' = (1,1,2,2,2,1,2,6,239)$. Length of the
  composition $l_1 = 154$, number of the proverb in list of strings
  with this composition $l_2 = 223$. Total information needed to
  transmit the string: $l = l_1+l_2 = 377$ bits.
* Footnotes
[fn:1] https://en.wikipedia.org/wiki/Arithmetic_coding#Precision_and_renormalization
[fn:2] http://www.hpl.hp.com/techreports/2004/HPL-2004-76.pdf
