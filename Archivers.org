#+LANGUAGE: en
#+TITLE: Information theory: HW #3 solution
#+AUTHOR: Volkhov Mikhail, M3338

* Task objectives, format, prerequisites
  So the task is to implement several algorithms of data compression
  and provide reports on them. Reports will contain logs from
  algorithms that will show how it operates this data. Tables with
  explanation will be attached. I won't attach haskell snippets this
  time as they became really big and complex. Instead, i'll put a
  separate pdf with all the code separately. *TODO*

  Proverb correspondent to my task is the following:

  #+BEGIN_QUOTE
  /Love the heart that hurts you, but never hurt the heart that loves you./
  #+END_QUOTE

  It's in english that's why i'll stick to utf-8/ascii encoding as
  byte representation. It contains $71$ letters, so in general it's
  $568$ bytes if used without any coding.
* Two-pass huffman coding
  I've implemented regural huffman coding, as it can be seen from the
  first table: code words of the same length are sorted
  lexicographically:
  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; margin-left: 15px;
  | Char | Code Word | Freq |
  |------+-----------+------|
  |      |        00 |   13 |
  | e    |       010 |    8 |
  | h    |       011 |    8 |
  | t    |       100 |   11 |
  | r    |      1010 |    5 |
  | u    |      1011 |    5 |
  | s    |     11000 |    2 |
  | y    |     11001 |    2 |
  | v    |     11010 |    3 |
  | a    |     11011 |    4 |
  | o    |     11100 |    4 |
  | ,    |    111010 |    1 |
  | .    |    111011 |    1 |
  | l    |    111100 |    1 |
  | n    |    111101 |    1 |
  | L    |    111110 |    1 |
  | b    |    111111 |    1 |
  |------+-----------+------|

  And the second pass completes encoding:
  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; margin-left: 15px;
  | $C$ | $P(C)$  | $Codeword$ | $L(S)$ |
  |-----+---------+------------+--------|
  | L   | 1 / 71  |     111110 |      6 |
  | o   | 4 / 71  |      11100 |     11 |
  | v   | 3 / 71  |      11010 |     16 |
  | e   | 8 / 71  |        010 |     19 |
  |     | 13 / 71 |         00 |     21 |
  | t   | 11 / 71 |        100 |     24 |
  | h   | 8 / 71  |        011 |     27 |
  | e   | 8 / 71  |        010 |     30 |
  |     | 13 / 71 |         00 |     32 |
  | h   | 8 / 71  |        011 |     35 |
  | e   | 8 / 71  |        010 |     38 |
  | a   | 4 / 71  |      11011 |     43 |
  | r   | 5 / 71  |       1010 |     47 |
  | t   | 11 / 71 |        100 |     50 |
  |     | 13 / 71 |         00 |     52 |
  | t   | 11 / 71 |        100 |     55 |
  | h   | 8 / 71  |        011 |     58 |
  | a   | 4 / 71  |      11011 |     63 |
  | t   | 11 / 71 |        100 |     66 |
  |     | 13 / 71 |         00 |     68 |
  | h   | 8 / 71  |        011 |     71 |
  | u   | 5 / 71  |       1011 |     75 |
  | r   | 5 / 71  |       1010 |     79 |
  | t   | 11 / 71 |        100 |     82 |
  | s   | 2 / 71  |      11000 |     87 |
  |     | 13 / 71 |         00 |     89 |
  | y   | 2 / 71  |      11001 |     94 |
  | o   | 4 / 71  |      11100 |     99 |
  | u   | 5 / 71  |       1011 |    103 |
  | ,   | 1 / 71  |     111010 |    109 |
  |     | 13 / 71 |         00 |    111 |
  | b   | 1 / 71  |     111111 |    117 |
  | u   | 5 / 71  |       1011 |    121 |
  | t   | 11 / 71 |        100 |    124 |
  |     | 13 / 71 |         00 |    126 |
  | n   | 1 / 71  |     111101 |    132 |
  | e   | 8 / 71  |        010 |    135 |
  | v   | 3 / 71  |      11010 |    140 |
  | e   | 8 / 71  |        010 |    143 |
  | r   | 5 / 71  |       1010 |    147 |
  |     | 13 / 71 |         00 |    149 |
  | h   | 8 / 71  |        011 |    152 |
  | u   | 5 / 71  |       1011 |    156 |
  | r   | 5 / 71  |       1010 |    160 |
  | t   | 11 / 71 |        100 |    163 |
  |     | 13 / 71 |         00 |    165 |
  | t   | 11 / 71 |        100 |    168 |
  | h   | 8 / 71  |        011 |    171 |
  | e   | 8 / 71  |        010 |    174 |
  |     | 13 / 71 |         00 |    176 |
  | h   | 8 / 71  |        011 |    179 |
  | e   | 8 / 71  |        010 |    182 |
  | a   | 4 / 71  |      11011 |    187 |
  | r   | 5 / 71  |       1010 |    191 |
  | t   | 11 / 71 |        100 |    194 |
  |     | 13 / 71 |         00 |    196 |
  | t   | 11 / 71 |        100 |    199 |
  | h   | 8 / 71  |        011 |    202 |
  | a   | 4 / 71  |      11011 |    207 |
  | t   | 11 / 71 |        100 |    210 |
  |     | 13 / 71 |         00 |    212 |
  | l   | 1 / 71  |     111100 |    218 |
  | o   | 4 / 71  |      11100 |    223 |
  | v   | 3 / 71  |      11010 |    228 |
  | e   | 8 / 71  |        010 |    231 |
  | s   | 2 / 71  |      11000 |    236 |
  |     | 13 / 71 |         00 |    238 |
  | y   | 2 / 71  |      11001 |    243 |
  | o   | 4 / 71  |      11100 |    248 |
  | u   | 5 / 71  |       1011 |    252 |
  | .   | 1 / 71  |     111011 |    258 |
  |-----+---------+------------+--------|

  Encoded proverb encoded is $l_2 = 258$ bits, while data amount needed to
  transfer huffman tree should be calculated manually. First, to
  transfer the tree itself, it's sufficient to pass only $19$ bits
  (calculated manually using table 3.3 from the study book).

  \begin{align*}
  \lceil\log{\dbinom{256}{1}}\rceil +
  \lceil\log{\dbinom{255}{3}}\rceil +
  \lceil\log{\dbinom{254}{2}}\rceil +
  \lceil\log{\dbinom{253}{5}}\rceil +
  \lceil\log{\dbinom{252}{6}}\rceil = 117
  \end{align*}

  So totally $l_1 = 19 + 117 = 136$, and total length is $l = l_1+l_2 =
  394$ bits. Much better than raw $568$ bits.
