#+LANGUAGE: en
#+TITLE: Information theory: HW #3 solution
#+AUTHOR: Volkhov Mikhail, M3338

* Task objectives, format, prerequisites
  So the task is to implement several algorithms of data compression
  and provide reports on them. Reports will contain logs from
  algorithms that will show how it operates this data. Tables with
  explanation will be attached. I won't attach haskell snippets this
  time as they became really big and complex. Instead, i'll put a
  separate pdf with all the code separately. *TODO*

  Proverb correspondent to my task is the following:

  #+BEGIN_QUOTE
  /Love the heart that hurts you, but never hurt the heart that loves you./
  #+END_QUOTE

  It's in english that's why i'll stick to utf-8/ascii encoding as
  byte representation. It contains $71$ letters, so in general it's
  $568$ bytes if used without any coding.

  Remark: sorry, but my rendering format doesn't support proper
  underscore marks (_) -- they turn into underlines and i see no way
  to escape them. "‚ê£" can be used instead, but it's too ugly. I'll use
  it when ambiguous, and just leave empty place in other places. Yes,
  and sorry for the tables. Both when they're are and are not
  full-width, they are ugly. Rule of thumb: use the same table
  formatting as in the textbook. So i choose to use full width.
* Two-pass huffman coding
  I've implemented regural huffman coding, as it can be seen from the
  first table: code words of the same length are sorted
  lexicographically:
  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; width: 100%;
  | $Char$ | $Codeword$ | $Frequency$ |
  |--------+------------+-------------|
  |        |         00 |          13 |
  | e      |        010 |           8 |
  | h      |        011 |           8 |
  | t      |        100 |          11 |
  | r      |       1010 |           5 |
  | u      |       1011 |           5 |
  | s      |      11000 |           2 |
  | y      |      11001 |           2 |
  | v      |      11010 |           3 |
  | a      |      11011 |           4 |
  | o      |      11100 |           4 |
  | ,      |     111010 |           1 |
  | .      |     111011 |           1 |
  | l      |     111100 |           1 |
  | n      |     111101 |           1 |
  | L      |     111110 |           1 |
  | b      |     111111 |           1 |
  |--------+------------+-------------|

  And the second pass completes encoding:
  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; width: 100%;
  | $C$ | $P(C)$  | $Codeword$ | $L(S)$ |
  |-----+---------+------------+--------|
  | L   | 1 / 71  |     111110 |      6 |
  | o   | 4 / 71  |      11100 |     11 |
  | v   | 3 / 71  |      11010 |     16 |
  | e   | 8 / 71  |        010 |     19 |
  |     | 13 / 71 |         00 |     21 |
  | t   | 11 / 71 |        100 |     24 |
  | h   | 8 / 71  |        011 |     27 |
  | e   | 8 / 71  |        010 |     30 |
  |     | 13 / 71 |         00 |     32 |
  | h   | 8 / 71  |        011 |     35 |
  | e   | 8 / 71  |        010 |     38 |
  | a   | 4 / 71  |      11011 |     43 |
  | r   | 5 / 71  |       1010 |     47 |
  | t   | 11 / 71 |        100 |     50 |
  |     | 13 / 71 |         00 |     52 |
  | t   | 11 / 71 |        100 |     55 |
  | h   | 8 / 71  |        011 |     58 |
  | a   | 4 / 71  |      11011 |     63 |
  | t   | 11 / 71 |        100 |     66 |
  |     | 13 / 71 |         00 |     68 |
  | h   | 8 / 71  |        011 |     71 |
  | u   | 5 / 71  |       1011 |     75 |
  | r   | 5 / 71  |       1010 |     79 |
  | t   | 11 / 71 |        100 |     82 |
  | s   | 2 / 71  |      11000 |     87 |
  |     | 13 / 71 |         00 |     89 |
  | y   | 2 / 71  |      11001 |     94 |
  | o   | 4 / 71  |      11100 |     99 |
  | u   | 5 / 71  |       1011 |    103 |
  | ,   | 1 / 71  |     111010 |    109 |
  |     | 13 / 71 |         00 |    111 |
  | b   | 1 / 71  |     111111 |    117 |
  | u   | 5 / 71  |       1011 |    121 |
  | t   | 11 / 71 |        100 |    124 |
  |     | 13 / 71 |         00 |    126 |
  | n   | 1 / 71  |     111101 |    132 |
  | e   | 8 / 71  |        010 |    135 |
  | v   | 3 / 71  |      11010 |    140 |
  | e   | 8 / 71  |        010 |    143 |
  | r   | 5 / 71  |       1010 |    147 |
  |     | 13 / 71 |         00 |    149 |
  | h   | 8 / 71  |        011 |    152 |
  | u   | 5 / 71  |       1011 |    156 |
  | r   | 5 / 71  |       1010 |    160 |
  | t   | 11 / 71 |        100 |    163 |
  |     | 13 / 71 |         00 |    165 |
  | t   | 11 / 71 |        100 |    168 |
  | h   | 8 / 71  |        011 |    171 |
  | e   | 8 / 71  |        010 |    174 |
  |     | 13 / 71 |         00 |    176 |
  | h   | 8 / 71  |        011 |    179 |
  | e   | 8 / 71  |        010 |    182 |
  | a   | 4 / 71  |      11011 |    187 |
  | r   | 5 / 71  |       1010 |    191 |
  | t   | 11 / 71 |        100 |    194 |
  |     | 13 / 71 |         00 |    196 |
  | t   | 11 / 71 |        100 |    199 |
  | h   | 8 / 71  |        011 |    202 |
  | a   | 4 / 71  |      11011 |    207 |
  | t   | 11 / 71 |        100 |    210 |
  |     | 13 / 71 |         00 |    212 |
  | l   | 1 / 71  |     111100 |    218 |
  | o   | 4 / 71  |      11100 |    223 |
  | v   | 3 / 71  |      11010 |    228 |
  | e   | 8 / 71  |        010 |    231 |
  | s   | 2 / 71  |      11000 |    236 |
  |     | 13 / 71 |         00 |    238 |
  | y   | 2 / 71  |      11001 |    243 |
  | o   | 4 / 71  |      11100 |    248 |
  | u   | 5 / 71  |       1011 |    252 |
  | .   | 1 / 71  |     111011 |    258 |
  |-----+---------+------------+--------|

  Encoded proverb encoded is $l_2 = 258$ bits, while data amount needed to
  transfer huffman tree should be calculated manually. First, to
  transfer the tree itself, it's sufficient to pass only $19$ bits
  (calculated manually using table 3.3 from the study book).

  \begin{align*}
  \left\lceil\log{\dbinom{256}{1}}\right\rceil +
  \left\lceil\log{\dbinom{255}{3}}\right\rceil +
  \left\lceil\log{\dbinom{254}{2}}\right\rceil +
  \left\lceil\log{\dbinom{253}{5}}\right\rceil +
  \left\lceil\log{\dbinom{252}{6}}\right\rceil = 117
  \end{align*}

  So totally $l_1 = 19 + 117 = 136$, and total length is $l = l_1+l_2 =
  394$ bits. Much better than raw $568$ bits.

* Adaptive arithmetic coding
  Implementation uses renormalization together with fixed-point
  precision arithmetics (16 bits words). Algorithm "A" from textbook
  is used (has $n+1$ in denominator).

  Here is the table algorithm outputs (backslash stands for escape
  symbol):

  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; width: 100%;
  | $C$   |    $P(C)$ | $Codeword$ | $L(S)$ |
  |-------+-----------+------------+--------|
  | \     |    1.0000 |            |      0 |
  | L     | 3.9216e-3 |    0100110 |      7 |
  | \     |    0.3333 |          0 |      8 |
  | o     | 3.9370e-3 |    0010011 |     15 |
  | \     |    0.4000 |         00 |     17 |
  | v     | 3.9526e-3 |     001000 |     23 |
  | \     |    0.4286 |        000 |     26 |
  | e     | 3.9683e-3 |  001000001 |     35 |
  | \     |    0.4444 |            |     35 |
  |       | 3.9841e-3 |  000010011 |     44 |
  | \     |    0.4545 |            |     44 |
  | t     | 4.0000e-3 |   00011111 |     52 |
  | \     |    0.4615 |          0 |     53 |
  | h     | 4.0161e-3 |   00011100 |     61 |
  | e     | 6.6667e-2 |      00001 |     66 |
  |       | 6.2500e-2 |       0000 |     70 |
  | h     | 5.8824e-2 |        001 |     73 |
  | e     |    0.1111 |        000 |     76 |
  | \     |    0.3684 |        001 |     79 |
  | a     | 4.0323e-3 |      01001 |     84 |
  | \     |    0.3810 |        000 |     87 |
  | r     | 4.0486e-3 |  001000100 |     96 |
  | t     | 4.3478e-2 |        010 |     99 |
  |       | 8.3333e-2 |      00000 |    104 |
  | t     | 8.0000e-2 |        010 |    107 |
  | h     | 7.6923e-2 |         00 |    109 |
  | a     | 3.7037e-2 |    0000010 |    116 |
  | t     |    0.1071 |        010 |    119 |
  |       |    0.1034 |       0000 |    123 |
  | h     |    0.1000 |        010 |    126 |
  | \     |    0.2903 |            |    126 |
  | u     | 4.0650e-3 |   00010101 |    134 |
  | r     | 3.0303e-2 |     000110 |    140 |
  | t     |    0.1176 |          0 |    141 |
  | \     |    0.2857 |       0001 |    145 |
  | s     | 4.0816e-3 |     001100 |    151 |
  |       |    0.1081 |     000000 |    157 |
  | \     |    0.2895 |          1 |    158 |
  | y     | 4.0984e-3 |     001101 |    164 |
  | o     | 2.5000e-2 |      00001 |    169 |
  | u     | 2.4390e-2 |        000 |    172 |
  | \     |    0.2857 |      00000 |    177 |
  | ,     | 4.1152e-3 | 0000100011 |    187 |
  |       |    0.1136 |        000 |    190 |
  | \     |    0.2889 |          1 |    191 |
  | b     | 4.1322e-3 |     001011 |    197 |
  | u     | 4.2553e-2 |      00010 |    202 |
  | t     |    0.1042 |       0001 |    206 |
  |       |    0.1224 |       0000 |    210 |
  | \     |    0.2800 |            |    210 |
  | n     | 4.1494e-3 |    0001000 |    217 |
  | e     | 5.7692e-2 |     000001 |    223 |
  | v     | 1.8868e-2 |    0011100 |    230 |
  | e     | 7.4074e-2 |        001 |    233 |
  | r     | 3.6364e-2 |       0011 |    237 |
  |       |    0.1250 |       0000 |    241 |
  | h     | 7.0175e-2 |        001 |    244 |
  | u     | 5.1724e-2 |      00110 |    249 |
  | r     | 5.0847e-2 |         01 |    251 |
  | t     |    0.1000 |       0001 |    255 |
  |       |    0.1311 |       0000 |    259 |
  | t     |    0.1129 |        010 |    262 |
  | h     | 7.9365e-2 |       0010 |    266 |
  | e     | 7.8125e-2 |       0010 |    270 |
  |       |    0.1385 |        000 |    273 |
  | h     | 9.0909e-2 |        010 |    276 |
  | e     | 8.9552e-2 |        001 |    279 |
  | a     | 2.9412e-2 |      00010 |    284 |
  | r     | 5.7971e-2 |       0011 |    288 |
  | t     |    0.1143 |          0 |    289 |
  |       |    0.1408 |     000000 |    295 |
  | t     |    0.1250 |            |    295 |
  | h     | 9.5890e-2 |     000010 |    301 |
  | a     | 4.0541e-2 |         00 |    303 |
  | t     |    0.1333 |        000 |    306 |
  |       |    0.1447 |     000000 |    312 |
  | \     |    0.1948 |         11 |    314 |
  | l     | 4.1667e-3 |    0101001 |    321 |
  | o     | 2.5316e-2 |     001100 |    327 |
  | v     | 2.5000e-2 |      10000 |    332 |
  | e     | 8.6420e-2 |       0010 |    336 |
  | s     | 1.2195e-2 |     011010 |    342 |
  |       |    0.1446 |        000 |    345 |
  | y     | 1.1905e-2 |       1000 |    349 |
  | o     | 3.5294e-2 |    0000111 |    356 |
  | u     | 4.6512e-2 |      01101 |    361 |
  | \     |    0.1839 |          1 |    362 |
  | .     | 4.1841e-3 |  000011110 |    371 |
  |-------+-----------+------------+--------|
  | final |           |          1 |    372 |

  On every step algorithm saves 16-digit high and low variables. If
  the interval we go into is small enough that new bounds share most
  significant bits, we put them on the wire. This algorithm is
  decribed both in textbook and on wikipedia[fn:1] and also in Amir
  Said's article "Introduction to Arithmetic Coding"[fn:2]. Thus empty
  spaces in third column mean that interval didn't satisfy this
  property. So eventually it took $372$ bits to encode the proverb,
  better than huffman.
* Enumerative
  First of all I emphasize that no /real encoder/ will be implemented,
  i'll just present here an estimate on how much information will it
  take. Enumerative encoding implementation seems complex and
  impractical to do.

  Here's the main function that calculates length of the input.
  #+BEGIN_SRC haskell
  enumerative :: BS.ByteString -> Integer
  enumerative input = l1 + l2
    where
      n = fromIntegral $ BS.length input
      chars = BS.unpack input
      unique = nub chars
      occurences =
          M.fromList $
          map (\i -> (i, fromIntegral $ length $ filter (== i) chars)) unique
      comp, compcomp, comp' :: [Integer]
      comp = reverse $
             sort $ map (\i -> fromMaybe 0 $ M.lookup i occurences) [0 .. 0xff]
      m = length comp
      compcomp = map (fromIntegral . length) $ group comp
      comp' = filter (> 0) comp
      l2 = ceiling $
           log2' $ foldr (\x acc -> acc `div` (factorial x)) (factorial n) comp'
      l11 = ceiling $ log2' $ n * product comp'
      l12 = ceiling $
            log2' $
            foldr (\x acc -> acc `div` (factorial x))
                  (factorial $ fromIntegral $ length comp)
                  compcomp
      l1 = l11 + l12
  #+END_SRC

  First sorted composition: $\tau =
  (13,11,8,8,5,5,4,4,3,2,2,1,1,1,1,1,1,0,0,..,0,0)$. Composition of
  composition $\tau' = (1,1,2,2,2,1,2,6,239)$. Length of the
  composition $l_1 = 154$, number of the proverb in list of strings
  with this composition $l_2 = 223$. Total information needed to
  transmit the string: $l = l_1+l_2 = 377$ bits.
* LZ77
  Implemented version of LZ77 uses levenshtein's code described in
  textbook (because elias and unary universal codes are less efficient
  for current dataset). It uses window of size 100, more than
  proverb's length.

  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; width: 100%;
  | $Flag$ | $Substring$      | $l$ | $l$ |       $Codeword$ | $Bits$ | $Total$ |
  |--------+------------------+-----+-----+------------------+--------+---------|
  |      0 | L                |     |   0 |        001001100 |      9 |       9 |
  |      0 | o                |     |   0 |        001101111 |      9 |      18 |
  |      0 | v                |     |   0 |        001110110 |      9 |      27 |
  |      0 | e                |     |   0 |        001100101 |      9 |      36 |
  |      0 | ‚ê£                |     |   0 |        001011111 |      9 |      45 |
  |      0 | t                |     |   0 |        001110100 |      9 |      54 |
  |      0 | h                |     |   0 |        001101000 |      9 |      63 |
  |      1 | e‚ê£               |   4 |   2 |          1100100 |      7 |      70 |
  |      1 | he               |   3 |   2 |         10011100 |      8 |      78 |
  |      0 | a                |     |   0 |        001100001 |      9 |      87 |
  |      0 | r                |     |   0 |        001110010 |      9 |      96 |
  |      1 | t                |   8 |   1 |           110000 |      6 |     102 |
  |      1 | ‚ê£th              |  10 |   3 |         11010101 |      8 |     110 |
  |      1 | a                |   6 |   1 |          1001100 |      7 |     117 |
  |      1 | t‚ê£               |   5 |   2 |        100101100 |      9 |     126 |
  |      1 | h                |  14 |   1 |          1011100 |      7 |     133 |
  |      0 | u                |     |   0 |        001110101 |      9 |     142 |
  |      1 | rt               |  10 |   2 |        101010100 |      9 |     151 |
  |      0 | s                |     |   0 |        001110011 |      9 |     160 |
  |      1 | ‚ê£                |  21 |   1 |          1101010 |      7 |     167 |
  |      0 | y                |     |   0 |        001111001 |      9 |     176 |
  |      1 | o                |  26 |   1 |          1110100 |      7 |     183 |
  |      1 | u                |   7 |   1 |          1001110 |      7 |     190 |
  |      0 | ,                |     |   0 |        000101100 |      9 |     199 |
  |      1 | ‚ê£                |  26 |   1 |          1110100 |      7 |     206 |
  |      0 | b                |     |   0 |        001100010 |      9 |     215 |
  |      1 | u                |  11 |   1 |         10010110 |      8 |     223 |
  |      1 | t‚ê£               |  20 |   2 |       1010100100 |     10 |     233 |
  |      0 | n                |     |   0 |        001101110 |      9 |     242 |
  |      1 | e                |  33 |   1 |         11000010 |      8 |     250 |
  |      1 | ve               |  35 |   2 |       1100011100 |     10 |     260 |
  |      1 | r                |  27 |   1 |         10110110 |      8 |     268 |
  |      1 | ‚ê£hurt            |  21 |   5 |     101010111001 |     12 |     280 |
  |      1 | ‚ê£the‚ê£heart‚ê£that‚ê£ |  41 |  16 | 1101001111100000 |     16 |     296 |
  |      0 | l                |     |   0 |        001101100 |      9 |     305 |
  |      1 | ove              |  61 |   3 |       1111101101 |     10 |     315 |
  |      1 | s‚ê£you            |  41 |   5 |    1010100111001 |     13 |     328 |
  |      0 | .                |     |   0 |        000101110 |      9 |     337 |
  |--------+------------------+-----+-----+------------------+--------+---------|

  Here's also results for other universal codes (smaller windows
  affect length dramatically because of that "the heart that" chunk in
  the end. Best performance of levenshtain is achieved because its
  encoding of "1" takes only 1 bit (compared to 2 bits of elias) and
  it's more effective then unary on bigger numbers. In general i
  expect elias to perform better.

  #+ATTR_HTML: :align center :border 2 :rules all :frame border :style line-height: 7px; width: 100%;
  | $Code$      | $W$ | $L$ |
  |-------------+-----+-----|
  | Unary       |  45 | 344 |
  | Unary       |  50 | 344 |
  | Unary       |  55 | 344 |
  | Unary       |  60 | 344 |
  | Unary       |  65 | 338 |
  | Unary       |  70 | 338 |
  | Unary       |  75 | 338 |
  | Levenshtein |  45 | 344 |
  | Levenshtein |  50 | 344 |
  | Levenshtein |  55 | 344 |
  | Levenshtein |  60 | 344 |
  | Levenshtein |  65 | 337 |
  | Levenshtein |  70 | 337 |
  | Levenshtein |  75 | 337 |
  | Elias       |  45 | 358 |
  | Elias       |  50 | 358 |
  | Elias       |  55 | 358 |
  | Elias       |  60 | 358 |
  | Elias       |  65 | 350 |
  | Elias       |  70 | 350 |
  | Elias       |  75 | 350 |
  |-------------+-----+-----|

  So in conclusion we've achieved $l = 337$ bits, which is the best
  result among experiments for now.
* LZW
  I've implemented LZW algorithm with escape symbol and matched it
  with the test proverb (if we cannot...), got 291 bit as in the
  textbook. Here are the result on the real proverb:

  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; width: 100%;
  | $Dictionary$ | $Match$ | $Dict index$ |     $CodeWord$ | $Bits$ | $Total$ |
  |--------------+---------+--------------+----------------+--------+---------|
  | L            |         |            0 |       01001100 |      8 |       8 |
  | o            |         |            0 |       01101111 |      8 |      16 |
  | v            |         |            0 |      001110110 |      9 |      25 |
  | e            |         |            0 |     0001100101 |     10 |      35 |
  | ‚ê£            |         |            0 |     0001011111 |     10 |      45 |
  | t            |         |            0 |    00001110100 |     11 |      56 |
  | h            |         |            0 |    00001101000 |     11 |      67 |
  | e‚ê£           | e       |            4 |            100 |      3 |      70 |
  | ‚ê£h           | ‚ê£       |            5 |            101 |      3 |      73 |
  | he           | h       |            7 |           0111 |      4 |      77 |
  | ea           | e       |            4 |           0100 |      4 |      81 |
  | a            |         |            0 |   000001100001 |     12 |      93 |
  | r            |         |            0 |   000001110010 |     12 |     105 |
  | t‚ê£           | t       |            6 |           0110 |      4 |     109 |
  | ‚ê£t           | ‚ê£       |            5 |           0101 |      4 |     113 |
  | th           | t       |            6 |           0110 |      4 |     117 |
  | ha           | h       |            7 |           0111 |      4 |     121 |
  | at           | a       |           12 |          01100 |      5 |     126 |
  | t‚ê£h          | t‚ê£      |           14 |          01110 |      5 |     131 |
  | hu           | h       |            7 |          00111 |      5 |     136 |
  | u            |         |            0 |  0000001110101 |     13 |     149 |
  | rt           | r       |           13 |          01101 |      5 |     154 |
  | ts           | t       |            6 |          00110 |      5 |     159 |
  | s            |         |            0 |  0000001110011 |     13 |     172 |
  | ‚ê£y           | ‚ê£       |            5 |          00101 |      5 |     177 |
  | y            |         |            0 |  0000001111001 |     13 |     190 |
  | ou           | o       |            2 |          00010 |      5 |     195 |
  | u,           | u       |           21 |          10101 |      5 |     200 |
  | ,            |         |            0 |  0000000101100 |     13 |     213 |
  | ‚ê£b           | ‚ê£       |            5 |          00101 |      5 |     218 |
  | b            |         |            0 |  0000001100010 |     13 |     231 |
  | ut           | u       |           21 |          10101 |      5 |     236 |
  | t‚ê£n          | t‚ê£      |           14 |          01110 |      5 |     241 |
  | n            |         |            0 | 00000001101110 |     14 |     255 |
  | ev           | e       |            4 |         000100 |      6 |     261 |
  | ve           | v       |            3 |         000011 |      6 |     267 |
  | er           | e       |            4 |         000100 |      6 |     273 |
  | r‚ê£           | r       |           13 |         001101 |      6 |     279 |
  | ‚ê£hu          | ‚ê£h      |            9 |         001001 |      6 |     285 |
  | ur           | u       |           21 |         010101 |      6 |     291 |
  | rt‚ê£          | rt      |           22 |         010110 |      6 |     297 |
  | ‚ê£th          | ‚ê£t      |           15 |         001111 |      6 |     303 |
  | he‚ê£          | he      |           10 |         001010 |      6 |     309 |
  | ‚ê£he          | ‚ê£h      |            9 |         001001 |      6 |     315 |
  | ear          | ea      |           11 |         001011 |      6 |     321 |
  | rt‚ê£t         | rt‚ê£     |           41 |         101001 |      6 |     327 |
  | tha          | th      |           16 |         010000 |      6 |     333 |
  | at‚ê£          | at      |           18 |         010010 |      6 |     339 |
  | ‚ê£l           | ‚ê£       |            5 |         000101 |      6 |     345 |
  | l            |         |            0 | 00000001101100 |     14 |     359 |
  | ov           | o       |            2 |         000010 |      6 |     365 |
  | ves          | ve      |           36 |         100100 |      6 |     371 |
  | s‚ê£           | s       |           24 |         011000 |      6 |     377 |
  | ‚ê£yo          | ‚ê£y      |           25 |         011001 |      6 |     383 |
  | ou.          | ou      |           27 |         011011 |      6 |     389 |
  | .            |         |            0 | 00000000101110 |     14 |     403 |
  |--------------+---------+--------------+----------------+--------+---------|

  Well, results ($l = 403$ bits) are clearly worse than they were with
  previous coding algorithms. On the contrary, LZW implementation is
  pretty simple and straight-forward. I assume that the biggest
  problem of LZW here is the big variety of new symbols (rather big) comparing to
  the length of input data -- we've spent a lot of bits to transmit
  new characters, especially coding escape symbol. Should perform
  better then lz77 on bigger datasets.

  For comparison i've taken this phrase that's 74 words and 500 bytes
  of lorem ipsum text:

  #+BEGIN_QUOTE
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras ornare
  diam nec interdum mollis. Phasellus tortor felis, dapibus eu
  bibendum eu, commodo quis erat. Vestibulum fringilla, purus semper
  eleifend laoreet, sem dui volutpat lectus, sed ullamcorper ante
  neque id lectus. Nulla ullamcorper egestas nisl, at convallis leo
  tempus vel. Sed mi lacus, aliquam ullamcorper purus vitae, vulputate
  dignissim ipsum. Nam in est eu quam maximus blandit. Integer nec
  iaculis felis. Vestibulum ut cras amet.
  #+END_QUOTE

  Here's a comparison of LZW/LZ77 with different window sizes and
  universal codes. Maximum windows size is 4000 (500 bytes):

  #+ATTR_HTML: :border 2 :rules all :frame border :style line-height: 7px; width: 100%;
  | $Algorithm$ | $W$         | $Universal Code$ | $Total bits$ |
  |-------------+-------------+------------------+--------------|
  | LZW         | ‚àÖ           |                ‚àÖ |         2617 |
  | LZ77        | Unary       |              500 |         2761 |
  | LZ77        | Unary       |             1000 |         2761 |
  | LZ77        | Unary       |             2000 |         2761 |
  | LZ77        | Unary       |             4000 |         2761 |
  | LZ77        | Levenshtein |              500 |         2835 |
  | LZ77        | Levenshtein |             1000 |         2835 |
  | LZ77        | Levenshtein |             2000 |         2835 |
  | LZ77        | Levenshtein |             4000 |         2835 |
  | LZ77        | Unary       |              200 |         2932 |
  | LZ77        | Elias       |              500 |         2949 |
  | LZ77        | Elias       |             1000 |         2949 |
  | LZ77        | Elias       |             2000 |         2949 |
  | LZ77        | Elias       |             4000 |         2949 |
  | LZ77        | Levenshtein |              200 |         3021 |
  | LZ77        | Unary       |              100 |         3048 |
  | LZ77        | Levenshtein |              100 |         3132 |
  | LZ77        | Elias       |              200 |         3148 |
  | LZ77        | Unary       |               50 |         3283 |
  | LZ77        | Elias       |              100 |         3305 |
  | LZ77        | Levenshtein |               50 |         3346 |
  | LZ77        | Elias       |               50 |         3591 |

  Interestingly, unary universal coding performs on average better
  than levenshtein/elias. And most importantly, our assumption
  appeared to be correct -- LZW saves us $144$ bits (0.34 percent).
* Footnotes
[fn:1] https://en.wikipedia.org/wiki/Arithmetic_coding#Precision_and_renormalization
[fn:2] http://www.hpl.hp.com/techreports/2004/HPL-2004-76.pdf
